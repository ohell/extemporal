extemporal - a scheme to enable provably secure message exchanges.

This project consists of a library, extemporal, that implements a scheme for securely exchanging messages over a channel compromised by cryptographically adept eavesdroppers and/or quick acting impersonators.

The central idea behind the scheme is to use one time pads, but never exchange the pads with the message recipients. Instead, the ciphers are decrypted by the encrypting party. This is achieved via successive encryption by both the sender and the recipient and the doubly encrypted messages being propagated back to the originator for decryption and the final transmission.

Here is the scheme:
 - Alice has a message for Bob. Message data is encrypted by Alice and sent to Bob (message).
 - Bob receives the encrypted message, and encrypts it again, before passing it back to Alice (acknowledgement).
 - Upon receiving the doubly encrypted acknowledgement, Alice authenticates the sender, partially decrypts the received data, and sends it to Bob (confirmation).
 - Bob receives the confirmation, authenticates the sender and decrypts the data to access the contents of the message in plaintext.

The randomly generated keys never leave Alice and Bob's respective possession, and encryption is not algorithmic, so the message exchange preserves the non-informative cipher produced by one time pads.
There is a a weakness, however. The 2nd message (acknowledgement) is the cipher-text for the first and third messages. i.e. an eavesdropper who observes the whole exchange can hope to recover the corresponding key (OTP) by comparing the doubly exncrypted acknowledgement to either of the 2 other messages, and applying it to the remaining message to recover the plaintext. This leads to an additional constraint upon the encrytion operation: the encryption key should not be deducible from knowing the message and the cipher.

Man-in-the-middle attack is a possibility, but only if the the attacker is able to impersonate Alice and Bob, and first completes the exchange with Bob and then exchanges the decrypted message with Alice.

We guard against this by verifying a shared secret at both ends, to authenticate the parties. The insight is that the attacker has to complete the exchanges with Alice and Bob in sequence. So, we securely hash the shared secret with the times at which the message and its reply were generated. This is now secure, because attacker can't generate the secure hash without the secret, and can't use a previously observed hash because all the transmitted hashes are salted with message times, and recipients check that the times included in the message are after the keys were generated.

The encryption scheme is pseudo-random one time pad. The cipher length is always the same as the message length (very short messages are padded, though).

The library contains three algorithms: XOR, Modular Exponentiantion and Modular Multiplication. New algorithms can be implemented by extending the EncryptionAlgorithm class, but they need to to meet the criteria that, for a given algorithm F and keys c and e:
- Gc(Fc(m)) = m, i.e. a decryption algorithm G should exist,
- Gc(Fe(Fc(m))) = Fe(m), i.e. it should be possible to partially decryt a double encrypted message, in any order. This is implied if Fc(Fe(m)) = Fc(Fe(m))
- There should not exist any function Q s.t Q(m, F, Fc(m)) = c i.e. encryption should not leak key info in the cipher

The traditional one-time-pad operations (XOR, modular addition), though fast and easy to implement, violate the last condition because it is trivially easy to obtain the key if the message and cipher are known. XOR algorithm is included in the code only for testing purposes.
Modular Exponentiation (c = m^k | N) is more secure in theory, but in practice the last condition is easily violated by a and of the solutions to the discrete logarithm problem (e.g. Pohlig Hellman).
Modular Multiplication (c = m * k | N) is more promising. We preprocess the message so that each message word is *not* co-prime with the chosen modulus. This ensures that the encrypted cipher can't be multiplicatively inverted (because cipher and N are not co-prime), i.e. multiple key values can give rise to the same cipher, so eavesdropper can't figure out which - remember that the message text for this attempted decryion is itself encrypted with an OTP, hence there are no useful patterns available for analysis.

Modular functions have been implemented as a per-word modular exponentiation, Fc(m) = {Fci(mi) mod N}, where mi and ci are the ith words of messages and key. The word size used is 2 bytes, N = 2^16 (i.e. Character.MAX + 1). This is mainly for reasons of preserving sanity - 2 byte char is the only unsigned integral type in Java.

The test project contains simple test implementation, one that exchanges messages between 2 pretend endpoints, and one that exchanges emails between 2 accounts you can specify.
To try it, run the Main function in the extempolar.jar found in the bin/ directory. You will need to specify your email accounts on the command line in order to run the email tests. See Main.java in test sources for the required options. They are complex, unless you plan to use GMail accounts.

Question, comments to amit@lipik.in
